{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tp Bloom","text":""},{"location":"#etat-du-tp","title":"\u00c9tat du TP","text":"<p>D\u00e9crivez ici l'\u00e9tat d'avancement du TP.</p>"},{"location":"#reponses-aux-questions","title":"R\u00e9ponses aux questions","text":"<p>Indiquez ici les r\u00e9ponses aux questions pos\u00e9es dans le TP. Vous reprendrez le num\u00e9ro de la section et le num\u00e9ro de la question. Par exemple pour r\u00e9pondre \u00e0 la question 3 de la section 2.4 vous indiquerez :</p>"},{"location":"#la-classe-bloomfilter-du-module-bloomfilter","title":"La classe BloomFilter du module bloomfilter","text":""},{"location":"#q2","title":"Q2:","text":"<p>Apr\u00e8s avoir impl\u00e9menter la m\u00e9thode <code>hash()</code> de la classe <code>HashFunctions</code>, ainsi que le constructeur et les deux m\u00e9thodes <code>add()</code>et <code>contains()</code> de la class <code>BloomFilter</code>.</p> <p>On a test\u00e9 nos fonctions en utilisant le programme de test d\u00e9j\u00e0 \u00e9crit qui ins\u00e8re le mot \"timoleon\" puis teste sa pr\u00e9sence dans le filtre et la pr\u00e9sence d'un mot al\u00e9atoire avec la commande suivante:</p> <pre><code>src % python3 test.py\n</code></pre> <p>Et on a eu le r\u00e9sultat suivant:</p> <pre><code>timoleon est present\n</code></pre> <p>Apr\u00e8s avoir ajouter cette ligne aussi au programme de test du fichier <code>test.py</code>, et qui permet de rajouter le mot al\u00e9atoire g\u00e9nerer par la fonction <code>random_word()</code>, pour pouvoir tester sa pr\u00e9sence dans le filtre :</p> <pre><code>if __name__ == \"__main__\":\n    hashes = HashFunctions(8)\n    bf = BloomFilter(16, hashes)\n    w = random_word()\n    bf.add(\"timoleon\")\n    bf.add(w) # LIGNE RAJOUT\u00c9E\n    if bf.contains(\"timoleon\"):\n        print(\"%s est present\" % (\"timoleon\"))\n    if bf.contains(w):\n        print(\"%s est present\" % (w))\n</code></pre> <p>On a eu le r\u00e9sultat suivant :</p> <pre><code>timoleon est present\nIQufLUs est present\n</code></pre> <p>Et qui permet de conclure que: </p> <ul> <li> <p>La fonction <code>random_word()</code> permet bien g\u00e9nerer un mot compris entre 4 et 7 lettres. </p> </li> <li> <p>La fonction <code>add()</code> permet bien de rajouter un \u00e9lement au filtre.</p> </li> <li> <p>La fonction <code>contains()</code> permet bien de v\u00e9rifier la pr\u00e9sence d'un \u00e9lement dans le filtre.</p> </li> </ul>"},{"location":"#q3","title":"Q3:","text":"<p>Pour trouver une taille du filtre pour laquelle un mot tir\u00e9 au hasard appara\u00eet pr\u00e9sent, ce qui veut dire qu'on a un faux positif, apr\u00e8s avoir tester plusieurs valeurs de n, je n'ai r\u00e9ussi d'obtenir aucun faux positif, donc j'ai d\u00e9cider de modifier un peu le code de test du fichier <code>test.py</code> pour automatiser cette recherche de la taille du filtre avec le code suivant:</p> <pre><code>if __name__ == \"__main__\":\n    for i in range(21):\n        hashes = HashFunctions(2**i)\n        bf = BloomFilter(16, hashes)\n        w = random_word()\n        bf.add(\"timoleon\")\n\n        if bf.contains(w):\n            print(\"%s est present avec i=%s\" % (w , i))\n            break\n</code></pre> <p>Avec ce code qui permet de tester les 21 premiers (de 0 \u00e0 20) taille du filtre, j'ai pu obtenir ce r\u00e9sultat:</p> <pre><code>src % python3 test.py\ndheUCve est present avec i=20\n</code></pre> <p>Apr\u00e8s un deuxi\u00e8me teste, j'ai pu obtenir ce r\u00e9sultat:</p> <pre><code>src % python3 test.py\nDkaINUva est present avec i=20\n</code></pre> <p>Donc taille du filtre pour laquelle un mot tir\u00e9 au hasard appara\u00eet pr\u00e9sent, ce qui veut dire qu'on a un faux positif est <code>2^20</code> donc <code>n=20</code>.</p>"},{"location":"bloom/","title":"Filtre de Bloom","text":"<p>Module that implements a Bloom filter.</p> Author <p>Dpt Informatique - FST - Univ. Lille 2021</p>"},{"location":"bloom/#src.bloomfilter.BloomFilter","title":"<code>BloomFilter</code>","text":"Source code in <code>src/bloomfilter.py</code> <pre><code>class BloomFilter:\n\n    def __init__ (self, n, hashes):\n        \"\"\"\n        Creates a new empty Bloom filter of size $2^n$\n\n        Args:\n          n (int): the log of the size of the filter (the filter will be of size $2^n$)\n          hashes (HashFunctions): the hash functions\n        \"\"\"\n        self.n = n # Le log de la taille du filtre\n        self.hashes = hashes # La fonction de hachage\n        self.size=2**n # La taille du filtre `2^n`\n        self.table = [False for i in range(self.size)] # On initialise tous les cases de la table \u00e0 False\n\n\n    def add (self, e):\n        \"\"\"\n        Adds `e` to the Bloom filter.\n\n        Args:\n          e (any): The element to be added\n        \"\"\"\n        for i in range (self.hashes.nb_functions()):\n            a=self.hashes.hash(i,e) % self.size\n            self.table[a]=True\n\n\n    def contains (self, e):\n        \"\"\"\n        Returns True if `e` is stored in the Bloom filter\n\n        Args:\n          e (any): The element to be tested\n\n        Returns:\n          (bool): whether the element has (probably) been added to the Bloom filter\n        \"\"\"\n        for i in range(self.hashes.nb_functions()):\n          res = self.hashes.hash(i, e) % self.size\n          if not self.table[res]:\n            return False\n        return True\n\n\n    def __contains__(self, e):\n        return self.contains(e)\n</code></pre>"},{"location":"bloom/#src.bloomfilter.BloomFilter.__init__","title":"<code>__init__(n, hashes)</code>","text":"<p>Creates a new empty Bloom filter of size \\(2^n\\)</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>the log of the size of the filter (the filter will be of size \\(2^n\\))</p> required <code>hashes</code> <code>HashFunctions</code> <p>the hash functions</p> required Source code in <code>src/bloomfilter.py</code> <pre><code>def __init__ (self, n, hashes):\n    \"\"\"\n    Creates a new empty Bloom filter of size $2^n$\n\n    Args:\n      n (int): the log of the size of the filter (the filter will be of size $2^n$)\n      hashes (HashFunctions): the hash functions\n    \"\"\"\n    self.n = n # Le log de la taille du filtre\n    self.hashes = hashes # La fonction de hachage\n    self.size=2**n # La taille du filtre `2^n`\n    self.table = [False for i in range(self.size)] # On initialise tous les cases de la table \u00e0 False\n</code></pre>"},{"location":"bloom/#src.bloomfilter.BloomFilter.add","title":"<code>add(e)</code>","text":"<p>Adds <code>e</code> to the Bloom filter.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>any</code> <p>The element to be added</p> required Source code in <code>src/bloomfilter.py</code> <pre><code>def add (self, e):\n    \"\"\"\n    Adds `e` to the Bloom filter.\n\n    Args:\n      e (any): The element to be added\n    \"\"\"\n    for i in range (self.hashes.nb_functions()):\n        a=self.hashes.hash(i,e) % self.size\n        self.table[a]=True\n</code></pre>"},{"location":"bloom/#src.bloomfilter.BloomFilter.contains","title":"<code>contains(e)</code>","text":"<p>Returns True if <code>e</code> is stored in the Bloom filter</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>any</code> <p>The element to be tested</p> required <p>Returns:</p> Type Description <code>bool</code> <p>whether the element has (probably) been added to the Bloom filter</p> Source code in <code>src/bloomfilter.py</code> <pre><code>def contains (self, e):\n    \"\"\"\n    Returns True if `e` is stored in the Bloom filter\n\n    Args:\n      e (any): The element to be tested\n\n    Returns:\n      (bool): whether the element has (probably) been added to the Bloom filter\n    \"\"\"\n    for i in range(self.hashes.nb_functions()):\n      res = self.hashes.hash(i, e) % self.size\n      if not self.table[res]:\n        return False\n    return True\n</code></pre>"},{"location":"hash/","title":"Fonctions de hachage","text":""},{"location":"hash/#module-hash_functions","title":"Module <code>hash_functions</code>","text":"<p>Module that implements multiple hashing for characters.</p> Author <p>Dpt Informatique - FST - Univ. Lille 2021</p>"},{"location":"hash/#src.hash_functions.HashFunctions","title":"<code>HashFunctions</code>","text":"Source code in <code>src/hash_functions.py</code> <pre><code>class HashFunctions:\n    def __init__(self, nb):\n        '''\n        Build hash functions for 128 characters.\n\n        Args:\n          nb (int): Number of hash functions to be used\n        '''\n        self.random_tab = [ [random.randint(1,32000) for j in range(128)] for i in range(nb) ]\n\n    def nb_functions(self):\n        '''\n        Return the number of functions implemented by the object\n\n        Returns:\n          (int): Number of functions\n\n        Examples:\n          &gt;&gt;&gt; h = HashFunctions(10)\n          &gt;&gt;&gt; h.nb_functions()\n          10\n        '''\n        return len(self.random_tab)\n\n    def hash(self, n_hash, s):\n        '''\n        Return the hash value associated to a string and a given hash function.\n\n        Args:\n          n_hash (int): the number of the hash function (starting at 0)\n          s (str): The string to compute the hash on\n\n        Returns:\n          (int): The sum of the hash value for each character of `s` for the hash function `n_hash`.\n\n        Warning: Pre-condition\n                 0 \u2264 `n_hash` &lt; `self.nb_functions()`\n        '''\n        res = 0\n        # On parcours notre chaine s, et pour chaque caract\u00e8re de cette chaine on r\u00e9cup\u00e8re sa valeur ASCII.\n        for c in s:\n            c_ascii = ord(c)\n            # Condition pour v\u00e9rifier que le caract\u00e8re trait\u00e9 fait partie des 128 premiers caract\u00e8res de la table ASCII.\n            if c_ascii &lt; 128:\n              # On fait la somme des valeurs de la fonction de hachage num\u00e9ro n_hash des caract\u00e8res de s.\n              res += self.random_tab[n_hash][c_ascii]\n            else:\n              raise ValueError(\"Caract\u00e8re invalide\")\n        return res\n\n\n\n\n\n    def __getitem__(self, tup):\n        return self.hash(tup[1], tup[0])\n</code></pre>"},{"location":"hash/#src.hash_functions.HashFunctions.__init__","title":"<code>__init__(nb)</code>","text":"<p>Build hash functions for 128 characters.</p> <p>Parameters:</p> Name Type Description Default <code>nb</code> <code>int</code> <p>Number of hash functions to be used</p> required Source code in <code>src/hash_functions.py</code> <pre><code>def __init__(self, nb):\n    '''\n    Build hash functions for 128 characters.\n\n    Args:\n      nb (int): Number of hash functions to be used\n    '''\n    self.random_tab = [ [random.randint(1,32000) for j in range(128)] for i in range(nb) ]\n</code></pre>"},{"location":"hash/#src.hash_functions.HashFunctions.hash","title":"<code>hash(n_hash, s)</code>","text":"<p>Return the hash value associated to a string and a given hash function.</p> <p>Parameters:</p> Name Type Description Default <code>n_hash</code> <code>int</code> <p>the number of the hash function (starting at 0)</p> required <code>s</code> <code>str</code> <p>The string to compute the hash on</p> required <p>Returns:</p> Type Description <code>int</code> <p>The sum of the hash value for each character of <code>s</code> for the hash function <code>n_hash</code>.</p> Pre-condition <p>0 \u2264 <code>n_hash</code> &lt; <code>self.nb_functions()</code></p> Source code in <code>src/hash_functions.py</code> <pre><code>def hash(self, n_hash, s):\n    '''\n    Return the hash value associated to a string and a given hash function.\n\n    Args:\n      n_hash (int): the number of the hash function (starting at 0)\n      s (str): The string to compute the hash on\n\n    Returns:\n      (int): The sum of the hash value for each character of `s` for the hash function `n_hash`.\n\n    Warning: Pre-condition\n             0 \u2264 `n_hash` &lt; `self.nb_functions()`\n    '''\n    res = 0\n    # On parcours notre chaine s, et pour chaque caract\u00e8re de cette chaine on r\u00e9cup\u00e8re sa valeur ASCII.\n    for c in s:\n        c_ascii = ord(c)\n        # Condition pour v\u00e9rifier que le caract\u00e8re trait\u00e9 fait partie des 128 premiers caract\u00e8res de la table ASCII.\n        if c_ascii &lt; 128:\n          # On fait la somme des valeurs de la fonction de hachage num\u00e9ro n_hash des caract\u00e8res de s.\n          res += self.random_tab[n_hash][c_ascii]\n        else:\n          raise ValueError(\"Caract\u00e8re invalide\")\n    return res\n</code></pre>"},{"location":"hash/#src.hash_functions.HashFunctions.nb_functions","title":"<code>nb_functions()</code>","text":"<p>Return the number of functions implemented by the object</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of functions</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; h = HashFunctions(10)\n&gt;&gt;&gt; h.nb_functions()\n10\n</code></pre> Source code in <code>src/hash_functions.py</code> <pre><code>def nb_functions(self):\n    '''\n    Return the number of functions implemented by the object\n\n    Returns:\n      (int): Number of functions\n\n    Examples:\n      &gt;&gt;&gt; h = HashFunctions(10)\n      &gt;&gt;&gt; h.nb_functions()\n      10\n    '''\n    return len(self.random_tab)\n</code></pre>"},{"location":"test/","title":"Fichier de test","text":""},{"location":"test/#src.test.random_word","title":"<code>random_word()</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>a word with random letters whose length is between 4 and 7.</p> Source code in <code>src/test.py</code> <pre><code>def random_word ():\n    \"\"\"\n    Returns:\n      (str): a word with random letters whose length is between 4 and 7.\n    \"\"\"\n    letters = [ chr(i) for i in range(ord('a'),ord('z')+1) ] + [ chr(i) for i in range(ord('A'),ord('Z')+1) ]\n    length = 4 + random.randint(0,4)\n    str = \"\"\n    for i in range(length):\n        str = str + random.choice(letters)\n    return str\n</code></pre>"}]}